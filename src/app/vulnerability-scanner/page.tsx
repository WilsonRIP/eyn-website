"use client";

import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/src/app/components/ui/card";
import { Button } from "@/src/app/components/ui/button";
import { Textarea } from "@/src/app/components/ui/textarea";
import { Input } from "@/src/app/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/src/app/components/ui/select";
import { Badge } from "@/src/app/components/ui/badge";
import { Progress } from "@/src/app/components/ui/progress";
import { Alert, AlertDescription } from "@/src/app/components/ui/alert";
import { Bug, Shield, AlertTriangle, CheckCircle, XCircle, Download, RotateCcw, Zap } from "lucide-react";

interface Vulnerability {
  type: 'xss' | 'sqli' | 'info';
  severity: 'high' | 'medium' | 'low';
  description: string;
  payload: string;
  recommendation: string;
  line?: number;
}

interface ScanResult {
  vulnerabilities: Vulnerability[];
  totalIssues: number;
  highIssues: number;
  mediumIssues: number;
  lowIssues: number;
  scanTime: number;
}

export default function VulnerabilityScannerPage() {
  const [code, setCode] = useState("");
  const [scanType, setScanType] = useState<"xss" | "sqli" | "both">("both");
  const [result, setResult] = useState<ScanResult | null>(null);
  const [isScanning, setIsScanning] = useState(false);
  const [error, setError] = useState("");

  const sampleCode = `<?php
// Sample vulnerable code for testing
$user_input = $_GET['search'];
$query = "SELECT * FROM users WHERE name = '$user_input'";
$result = mysql_query($query);

echo "<div>Welcome " . $_POST['username'] . "</div>";
echo "<script>var user = '" . $_GET['user'] . "';</script>";
?>`;

  const xssPayloads = [
    '<script>alert("XSS")</script>',
    '"><script>alert("XSS")</script>',
    'javascript:alert("XSS")',
    '<img src=x onerror=alert("XSS")>',
    '<svg onload=alert("XSS")>',
    '"><img src=x onerror=alert("XSS")>',
    '\'><script>alert("XSS")</script>',
    '<iframe src="javascript:alert(\'XSS\')">',
    '<body onload=alert("XSS")>',
    '<input onfocus=alert("XSS") autofocus>'
  ];

  const sqliPayloads = [
    "' OR '1'='1",
    "' OR 1=1--",
    "'; DROP TABLE users;--",
    "' UNION SELECT * FROM users--",
    "' OR '1'='1' LIMIT 1--",
    "admin'--",
    "1' OR '1' = '1' #",
    "' OR 1=1#",
    "'; INSERT INTO users VALUES (1,'hacker','password');--",
    "' OR 'x'='x"
  ];

  const scanForXSS = (code: string): Vulnerability[] => {
    const vulnerabilities: Vulnerability[] = [];
    const lines = code.split('\n');

    // Check for common XSS patterns
    const xssPatterns = [
      {
        pattern: /echo\s*["'].*\$.*["']/gi,
        description: "Direct output of user input without sanitization",
        severity: 'high' as const
      },
      {
        pattern: /innerHTML\s*=\s*.*\$.*/gi,
        description: "Setting innerHTML with user input",
        severity: 'high' as const
      },
      {
        pattern: /document\.write\s*\(.*\$.*\)/gi,
        description: "Using document.write with user input",
        severity: 'high' as const
      },
      {
        pattern: /eval\s*\(.*\$.*\)/gi,
        description: "Using eval with user input",
        severity: 'critical' as const
      },
      {
        pattern: /<script>.*\$.*<\/script>/gi,
        description: "Script tags containing user input",
        severity: 'high' as const
      }
    ];

    lines.forEach((line, index) => {
      xssPatterns.forEach(pattern => {
        if (pattern.pattern.test(line)) {
          vulnerabilities.push({
            type: 'xss',
            severity: pattern.severity,
            description: pattern.description,
            payload: xssPayloads[Math.floor(Math.random() * xssPayloads.length)],
            recommendation: "Use proper output encoding and input validation. Consider using frameworks with built-in XSS protection.",
            line: index + 1
          });
        }
      });
    });

    return vulnerabilities;
  };

  const scanForSQLi = (code: string): Vulnerability[] => {
    const vulnerabilities: Vulnerability[] = [];
    const lines = code.split('\n');

    // Check for common SQL injection patterns
    const sqliPatterns = [
      {
        pattern: /mysql_query\s*\(.*\$.*\)/gi,
        description: "Using mysql_query with user input",
        severity: 'high' as const
      },
      {
        pattern: /mysqli_query\s*\(.*\$.*\)/gi,
        description: "Using mysqli_query with user input",
        severity: 'high' as const
      },
      {
        pattern: /query\s*=\s*["'].*\$.*["']/gi,
        description: "Building SQL queries with string concatenation",
        severity: 'high' as const
      },
      {
        pattern: /execute\s*\(.*\$.*\)/gi,
        description: "Executing queries with user input",
        severity: 'high' as const
      },
      {
        pattern: /SELECT.*\$.*FROM/gi,
        description: "SQL SELECT with user input",
        severity: 'medium' as const
      }
    ];

    lines.forEach((line, index) => {
      sqliPatterns.forEach(pattern => {
        if (pattern.pattern.test(line)) {
          vulnerabilities.push({
            type: 'sqli',
            severity: pattern.severity,
            description: pattern.description,
            payload: sqliPayloads[Math.floor(Math.random() * sqliPayloads.length)],
            recommendation: "Use prepared statements or parameterized queries. Never concatenate user input directly into SQL queries.",
            line: index + 1
          });
        }
      });
    });

    return vulnerabilities;
  };

  const scanCode = async () => {
    if (!code.trim()) {
      setError("Please enter some code to scan");
      return;
    }

    setIsScanning(true);
    setError("");
    setResult(null);

    try {
      // Simulate scanning time
      await new Promise(resolve => setTimeout(resolve, 2000));

      let vulnerabilities: Vulnerability[] = [];

      if (scanType === "xss" || scanType === "both") {
        vulnerabilities.push(...scanForXSS(code));
      }

      if (scanType === "sqli" || scanType === "both") {
        vulnerabilities.push(...scanForSQLi(code));
      }

      // Add some informational findings
      if (vulnerabilities.length === 0) {
        vulnerabilities.push({
          type: 'info',
          severity: 'low',
          description: "No obvious vulnerabilities found in the scanned code",
          payload: "N/A",
          recommendation: "Continue to follow security best practices and consider using automated security testing tools."
        });
      }

      const highIssues = vulnerabilities.filter(v => v.severity === 'high').length;
      const mediumIssues = vulnerabilities.filter(v => v.severity === 'medium').length;
      const lowIssues = vulnerabilities.filter(v => v.severity === 'low').length;

      setResult({
        vulnerabilities,
        totalIssues: vulnerabilities.length,
        highIssues,
        mediumIssues,
        lowIssues,
        scanTime: 2.1
      });
    } catch (error) {
      setError("Failed to scan code. Please try again.");
    } finally {
      setIsScanning(false);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'high': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400';
      case 'medium': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';
      case 'low': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';
    }
  };

  const getVulnerabilityIcon = (type: string) => {
    switch (type) {
      case 'xss': return <AlertTriangle className="h-4 w-4 text-orange-500" />;
      case 'sqli': return <Bug className="h-4 w-4 text-red-500" />;
      case 'info': return <Shield className="h-4 w-4 text-blue-500" />;
      default: return <AlertTriangle className="h-4 w-4" />;
    }
  };

  const downloadReport = () => {
    if (!result) return;

    const report = {
      scanType,
      timestamp: new Date().toISOString(),
      results: result,
      code: code
    };

    const blob = new Blob([JSON.stringify(report, null, 2)], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `vulnerability-scan-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const clearAll = () => {
    setCode("");
    setResult(null);
    setError("");
  };

  const loadSampleCode = () => {
    setCode(sampleCode);
    setError("");
    setResult(null);
  };

  return (
    <div className="container mx-auto px-4 py-8 animate-fade-in">
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold mb-4 animate-slide-in-left">XSS/SQLi Scanner</h1>
          <p className="text-muted-foreground text-lg animate-slide-in-right">
            Quick check for common injection vectors in web applications
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Input */}
          <Card className="card-enhanced">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Bug className="h-5 w-5" />
                <span>Code Input</span>
              </CardTitle>
              <CardDescription>
                Paste your code to scan for vulnerabilities
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <label className="text-sm font-medium">Scan Type</label>
                <Select value={scanType} onValueChange={(value: "xss" | "sqli" | "both") => setScanType(value)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="both">XSS & SQL Injection</SelectItem>
                    <SelectItem value="xss">XSS Only</SelectItem>
                    <SelectItem value="sqli">SQL Injection Only</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <Textarea
                placeholder="Paste your code here to scan for vulnerabilities..."
                value={code}
                onChange={(e) => setCode(e.target.value)}
                className="min-h-[400px] font-mono text-sm input-enhanced"
              />
              
              <div className="flex flex-wrap gap-2">
                <Button 
                  onClick={scanCode} 
                  className="btn-enhanced hover-lift"
                  disabled={!code.trim() || isScanning}
                >
                  {isScanning ? (
                    <>
                      <Zap className="h-4 w-4 mr-2 animate-spin" />
                      Scanning...
                    </>
                  ) : (
                    <>
                      <Bug className="h-4 w-4 mr-2" />
                      Scan Code
                    </>
                  )}
                </Button>
                <Button 
                  onClick={loadSampleCode} 
                  variant="outline" 
                  className="hover-lift"
                >
                  Load Sample
                </Button>
                <Button 
                  onClick={clearAll} 
                  variant="outline" 
                  className="hover-lift"
                >
                  <RotateCcw className="h-4 w-4 mr-2" />
                  Clear
                </Button>
              </div>

              {error && (
                <Alert className="border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-950">
                  <AlertTriangle className="h-4 w-4 text-red-600" />
                  <AlertDescription className="text-red-800 dark:text-red-200">
                    {error}
                  </AlertDescription>
                </Alert>
              )}
            </CardContent>
          </Card>

          {/* Results */}
          <Card className="card-enhanced">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Shield className="h-5 w-5" />
                <span>Scan Results</span>
                {result && (
                  <Badge variant="outline" className={
                    result.highIssues > 0 ? "text-red-600" : 
                    result.mediumIssues > 0 ? "text-yellow-600" : "text-green-600"
                  }>
                    {result.totalIssues} issues found
                  </Badge>
                )}
              </CardTitle>
              <CardDescription>
                Vulnerability analysis results
              </CardDescription>
            </CardHeader>
            <CardContent>
              {result ? (
                <div className="space-y-6">
                  {/* Summary */}
                  <div className="grid grid-cols-3 gap-4">
                    <div className="text-center p-3 bg-red-50 dark:bg-red-950/20 rounded-lg">
                      <div className="text-2xl font-bold text-red-600">{result.highIssues}</div>
                      <div className="text-xs text-muted-foreground">High</div>
                    </div>
                    <div className="text-center p-3 bg-yellow-50 dark:bg-yellow-950/20 rounded-lg">
                      <div className="text-2xl font-bold text-yellow-600">{result.mediumIssues}</div>
                      <div className="text-xs text-muted-foreground">Medium</div>
                    </div>
                    <div className="text-center p-3 bg-blue-50 dark:bg-blue-950/20 rounded-lg">
                      <div className="text-2xl font-bold text-blue-600">{result.lowIssues}</div>
                      <div className="text-xs text-muted-foreground">Low</div>
                    </div>
                  </div>

                  {/* Scan Info */}
                  <div className="text-sm text-muted-foreground text-center">
                    Scan completed in {result.scanTime} seconds
                  </div>

                  {/* Vulnerabilities */}
                  <div className="space-y-4">
                    <h4 className="font-medium">Findings</h4>
                    {result.vulnerabilities.map((vuln, index) => (
                      <div key={index} className="border rounded-lg p-4 space-y-3">
                        <div className="flex items-start justify-between">
                          <div className="flex items-center gap-2">
                            {getVulnerabilityIcon(vuln.type)}
                            <span className="font-medium">{vuln.description}</span>
                          </div>
                          <Badge className={getSeverityColor(vuln.severity)}>
                            {vuln.severity.toUpperCase()}
                          </Badge>
                        </div>
                        
                        {vuln.line && (
                          <div className="text-sm text-muted-foreground">
                            Line: {vuln.line}
                          </div>
                        )}
                        
                        <div className="space-y-2">
                          <div className="text-sm">
                            <span className="font-medium">Test Payload:</span>
                            <code className="ml-2 bg-muted px-2 py-1 rounded text-xs">
                              {vuln.payload}
                            </code>
                          </div>
                          <div className="text-sm">
                            <span className="font-medium">Recommendation:</span>
                            <p className="mt-1 text-muted-foreground">{vuln.recommendation}</p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>

                  <Button
                    onClick={downloadReport}
                    variant="outline"
                    className="w-full hover-lift"
                  >
                    <Download className="h-4 w-4 mr-2" />
                    Download Report
                  </Button>
                </div>
              ) : (
                <div className="text-center text-muted-foreground py-8">
                  <Shield className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>Enter code and click "Scan Code" to see results</p>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        <Card className="card-enhanced mt-6">
          <CardHeader>
            <CardTitle>Security Best Practices</CardTitle>
            <CardDescription>
              How to prevent common web vulnerabilities
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <h3 className="font-semibold">Preventing XSS</h3>
                <ul className="text-sm text-muted-foreground space-y-2">
                  <li>• Use output encoding (HTML, JavaScript, CSS)</li>
                  <li>• Implement Content Security Policy (CSP)</li>
                  <li>• Validate and sanitize all user input</li>
                  <li>• Use modern frameworks with built-in protection</li>
                  <li>• Avoid innerHTML and document.write with user data</li>
                </ul>
              </div>
              <div className="space-y-4">
                <h3 className="font-semibold">Preventing SQL Injection</h3>
                <ul className="text-sm text-muted-foreground space-y-2">
                  <li>• Use prepared statements or parameterized queries</li>
                  <li>• Implement input validation and sanitization</li>
                  <li>• Use ORM frameworks when possible</li>
                  <li>• Apply principle of least privilege</li>
                  <li>• Regular security audits and testing</li>
                </ul>
              </div>
            </div>
            <div className="mt-6 p-4 bg-yellow-50 dark:bg-yellow-950/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
              <p className="text-sm text-yellow-800 dark:text-yellow-200">
                <strong>Disclaimer:</strong> This scanner provides basic vulnerability detection and should not replace comprehensive security testing. 
                Always use professional security tools and services for production applications.
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
} 